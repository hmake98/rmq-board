<!DOCTYPE html>
<html>

<head>
    <title>
        <%= title %>
    </title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        :root {
            --primary-color: #ff6600;
            --secondary-color: #0066ff;
            --bg-color: #f5f5f5;
            --card-bg: #ffffff;
            --text-color: #333333;
            --border-color: #dddddd;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: var(--bg-color);
            color: var(--text-color);
        }

        .container {
            padding: 20px;
        }

        header {
            background-color: var(--primary-color);
            color: white;
            padding: 15px 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        h1 {
            margin: 0;
            font-size: 1.5rem;
        }

        .tabs {
            display: flex;
            margin-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .tab {
            padding: 12px 20px;
            cursor: pointer;
            border: none;
            background: none;
            font-size: 1rem;
            font-weight: 500;
            color: var(--text-color);
            position: relative;
        }

        .tab.active {
            color: var(--primary-color);
        }

        .tab.active::after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            width: 100%;
            height: 3px;
            background-color: var(--primary-color);
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .card {
            background-color: var(--card-bg);
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            margin-bottom: 20px;
            overflow: hidden;
        }

        .card-header {
            padding: 15px 20px;
            border-bottom: 1px solid var(--border-color);
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-body {
            padding: 20px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        table th,
        table td {
            text-align: left;
            padding: 12px 15px;
            border-bottom: 1px solid var(--border-color);
        }

        table th {
            font-weight: 600;
            color: #666;
        }

        table tr:last-child td {
            border-bottom: none;
        }

        .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
        }

        .badge-success {
            background-color: #e6f4ea;
            color: #137333;
        }

        .badge-warning {
            background-color: #fef7e0;
            color: #b06000;
        }

        .badge-danger {
            background-color: #fce8e6;
            color: #c5221f;
        }

        .stats-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }

        .stat-card {
            background-color: var(--card-bg);
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
            padding: 20px;
            text-align: center;
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 600;
            margin: 10px 0;
            color: var(--primary-color);
        }

        .stat-label {
            color: #666;
            font-size: 0.9rem;
        }

        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }

        .empty-state {
            text-align: center;
            padding: 40px 20px;
            color: #666;
        }

        .empty-state-icon {
            font-size: 3rem;
            margin-bottom: 10px;
            color: #ccc;
        }

        .message-viewer {
            background-color: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            font-family: monospace;
            white-space: pre-wrap;
            max-height: 300px;
            overflow: auto;
        }

        .refresh-button {
            background-color: var(--secondary-color);
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9rem;
        }

        .message-container {
            margin-top: 20px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            overflow: hidden;
        }

        .message-header {
            padding: 10px 15px;
            background-color: #f8f9fa;
            border-bottom: 1px solid var(--border-color);
            font-weight: 600;
        }

        .message-body {
            padding: 15px;
        }

        .connection-status {
            display: inline-block;
            margin-left: 10px;
            font-size: 0.8rem;
            padding: 3px 8px;
            border-radius: 12px;
            background-color: #e6f4ea;
            color: #137333;
        }

        .connection-status.disconnected {
            background-color: #fce8e6;
            color: #c5221f;
        }

        .last-updated {
            font-size: 0.8rem;
            color: #666;
            margin-top: 5px;
        }

        .message-payload {
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 200px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
        }

        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 6px;
            width: 70%;
            max-width: 800px;
            max-height: 80vh;
            overflow: auto;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: black;
        }
    </style>
</head>

<body>
    <header>
        <div class="header-content">
            <h1>RabbitMQ Board</h1>
            <div>
                <span id="connection-status" class="connection-status">Connected</span>
            </div>
        </div>
    </header>

    <div class="container">
        <div class="tabs">
            <button class="tab active" data-tab="overview">Overview</button>
            <button class="tab" data-tab="queues">Queues</button>
            <button class="tab" data-tab="exchanges">Exchanges</button>
            <button class="tab" data-tab="bindings">Bindings</button>
        </div>

        <div id="overview-tab" class="tab-content active">
            <div class="stats-container" id="overview-stats">
                <div class="stat-card">
                    <div class="stat-label">Queues</div>
                    <div class="stat-value" id="queues-count">-</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Connections</div>
                    <div class="stat-value" id="connections-count">-</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Channels</div>
                    <div class="stat-value" id="channels-count">-</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Consumers</div>
                    <div class="stat-value" id="consumers-count">-</div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    RabbitMQ Server Info
                    <div>
                        <button class="refresh-button" id="refresh-overview">Refresh</button>
                    </div>
                </div>
                <div class="card-body">
                    <table id="server-info-table">
                        <tbody>
                            <tr>
                                <th>Version</th>
                                <td id="server-version">-</td>
                            </tr>
                            <tr>
                                <th>Erlang Version</th>
                                <td id="erlang-version">-</td>
                            </tr>
                            <tr>
                                <th>Uptime</th>
                                <td id="server-uptime">-</td>
                            </tr>
                            <tr>
                                <th>Message Rates</th>
                                <td id="message-rates">-</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="last-updated" id="overview-last-updated">Last updated: never</div>
        </div>

        <div id="queues-tab" class="tab-content">
            <div class="card">
                <div class="card-header">
                    Queues
                    <div>
                        <button class="refresh-button" id="refresh-queues">Refresh</button>
                    </div>
                </div>
                <div class="card-body">
                    <table id="queues-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>State</th>
                                <th>Messages</th>
                                <th>Consumers</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="queues-table-body">
                            <tr>
                                <td colspan="5" class="loading">Loading queues...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="last-updated" id="queues-last-updated">Last updated: never</div>
        </div>

        <div id="exchanges-tab" class="tab-content">
            <div class="card">
                <div class="card-header">
                    Exchanges
                    <div>
                        <button class="refresh-button" id="refresh-exchanges">Refresh</button>
                    </div>
                </div>
                <div class="card-body">
                    <table id="exchanges-table">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Type</th>
                                <th>Features</th>
                                <th>Messages In/Out</th>
                            </tr>
                        </thead>
                        <tbody id="exchanges-table-body">
                            <tr>
                                <td colspan="4" class="loading">Loading exchanges...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="last-updated" id="exchanges-last-updated">Last updated: never</div>
        </div>

        <div id="bindings-tab" class="tab-content">
            <div class="card">
                <div class="card-header">
                    Bindings
                    <div>
                        <button class="refresh-button" id="refresh-bindings">Refresh</button>
                    </div>
                </div>
                <div class="card-body">
                    <table id="bindings-table">
                        <thead>
                            <tr>
                                <th>Source</th>
                                <th>Destination</th>
                                <th>Routing Key</th>
                                <th>Arguments</th>
                            </tr>
                        </thead>
                        <tbody id="bindings-table-body">
                            <tr>
                                <td colspan="4" class="loading">Loading bindings...</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="last-updated" id="bindings-last-updated">Last updated: never</div>
        </div>
    </div>

    <!-- Modal for viewing messages -->
    <div id="message-modal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Messages in <span id="queue-name-title"></span></h2>
            <div id="messages-container"></div>
        </div>
    </div>

    <script src="/static/socket.io.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Tab switching
            const tabs = document.querySelectorAll('.tab');
            const tabContents = document.querySelectorAll('.tab-content');

            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    const tabId = tab.getAttribute('data-tab');

                    // Update active tab
                    tabs.forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');

                    // Update active content
                    tabContents.forEach(content => {
                        content.classList.remove('active');
                        if (content.id === `${tabId}-tab`) {
                            content.classList.add('active');
                        }
                    });
                });
            });

            // Socket.io connection
            const socket = io();
            const connectionStatus = document.getElementById('connection-status');

            socket.on('connect', () => {
                connectionStatus.textContent = 'Connected';
                connectionStatus.classList.remove('disconnected');
            });

            socket.on('disconnect', () => {
                connectionStatus.textContent = 'Disconnected';
                connectionStatus.classList.add('disconnected');
            });

            // Handling RabbitMQ data
            socket.on('rabbitmq-data', data => {
                updateOverview(data.overview);
                updateQueues(data.queues);
                updateExchanges(data.exchanges);

                // Update last updated timestamps
                updateTimestamp('overview-last-updated');
                updateTimestamp('queues-last-updated');
                updateTimestamp('exchanges-last-updated');
            });

            socket.on('rabbitmq-error', error => {
                console.error('RabbitMQ Error:', error);
                alert(`Error fetching RabbitMQ data: ${error.message}`);
            });

            // Function to update overview data
            function updateOverview(overview) {
                if (!overview) return;

                document.getElementById('queues-count').textContent = overview.queue_totals?.total || 0;
                document.getElementById('connections-count').textContent = overview.object_totals?.connections || 0;
                document.getElementById('channels-count').textContent = overview.object_totals?.channels || 0;
                document.getElementById('consumers-count').textContent = overview.object_totals?.consumers || 0;

                document.getElementById('server-version').textContent = overview.rabbitmq_version || '-';
                document.getElementById('erlang-version').textContent = overview.erlang_version || '-';
                document.getElementById('server-uptime').textContent = formatUptime(overview.uptime) || '-';

                const rates = `${formatRate(overview.message_stats?.publish_details?.rate)} msg/s`;
                document.getElementById('message-rates').textContent = rates;
            }

            // Function to update queues data
            function updateQueues(queues) {
                const tableBody = document.getElementById('queues-table-body');

                if (!queues || queues.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="5" class="empty-state">No queues found</td></tr>';
                    return;
                }

                tableBody.innerHTML = '';

                queues.forEach(queue => {
                    const row = document.createElement('tr');

                    const nameCell = document.createElement('td');
                    nameCell.textContent = queue.name;

                    const stateCell = document.createElement('td');
                    const stateBadge = document.createElement('span');
                    stateBadge.classList.add('badge');

                    if (queue.state === 'running') {
                        stateBadge.classList.add('badge-success');
                        stateBadge.textContent = 'Running';
                    } else {
                        stateBadge.classList.add('badge-warning');
                        stateBadge.textContent = queue.state;
                    }

                    stateCell.appendChild(stateBadge);

                    const messagesCell = document.createElement('td');
                    messagesCell.textContent = queue.messages || 0;

                    const consumersCell = document.createElement('td');
                    consumersCell.textContent = queue.consumers || 0;

                    const actionsCell = document.createElement('td');
                    const viewButton = document.createElement('button');
                    viewButton.classList.add('refresh-button');
                    viewButton.textContent = 'View Messages';
                    viewButton.addEventListener('click', () => {
                        viewQueueMessages(queue.vhost, queue.name);
                    });

                    actionsCell.appendChild(viewButton);

                    row.appendChild(nameCell);
                    row.appendChild(stateCell);
                    row.appendChild(messagesCell);
                    row.appendChild(consumersCell);
                    row.appendChild(actionsCell);

                    tableBody.appendChild(row);
                });
            }

            // Function to update exchanges data
            function updateExchanges(exchanges) {
                const tableBody = document.getElementById('exchanges-table-body');

                if (!exchanges || exchanges.length === 0) {
                    tableBody.innerHTML = '<tr><td colspan="4" class="empty-state">No exchanges found</td></tr>';
                    return;
                }

                tableBody.innerHTML = '';

                exchanges.forEach(exchange => {
                    const row = document.createElement('tr');

                    const nameCell = document.createElement('td');
                    nameCell.textContent = exchange.name || '(unnamed)';

                    const typeCell = document.createElement('td');
                    typeCell.textContent = exchange.type;

                    const featuresCell = document.createElement('td');
                    const features = [];

                    if (exchange.durable) features.push('durable');
                    if (exchange.auto_delete) features.push('auto-delete');
                    if (exchange.internal) features.push('internal');

                    featuresCell.textContent = features.join(', ') || 'none';

                    const statsCell = document.createElement('td');
                    const inRate = formatRate(exchange.message_stats?.publish_in_details?.rate) || 0;
                    const outRate = formatRate(exchange.message_stats?.publish_out_details?.rate) || 0;

                    statsCell.textContent = `In: ${inRate}/s, Out: ${outRate}/s`;

                    row.appendChild(nameCell);
                    row.appendChild(typeCell);
                    row.appendChild(featuresCell);
                    row.appendChild(statsCell);

                    tableBody.appendChild(row);
                });
            }

            // Function to update bindings data
            async function updateBindings() {
                try {
                    const response = await fetch(`${window.location.pathname}/api/bindings`);
                    const bindings = await response.json();

                    const tableBody = document.getElementById('bindings-table-body');

                    if (!bindings || bindings.length === 0) {
                        tableBody.innerHTML = '<tr><td colspan="4" class="empty-state">No bindings found</td></tr>';
                        return;
                    }

                    tableBody.innerHTML = '';

                    bindings.forEach(binding => {
                        const row = document.createElement('tr');

                        const sourceCell = document.createElement('td');
                        sourceCell.textContent = binding.source || '(none)';

                        const destinationCell = document.createElement('td');
                        destinationCell.textContent = binding.destination;

                        const routingKeyCell = document.createElement('td');
                        routingKeyCell.textContent = binding.routing_key || '(none)';

                        const argsCell = document.createElement('td');
                        argsCell.textContent = JSON.stringify(binding.arguments || {}) || '{}';

                        row.appendChild(sourceCell);
                        row.appendChild(destinationCell);
                        row.appendChild(routingKeyCell);
                        row.appendChild(argsCell);

                        tableBody.appendChild(row);
                    });

                    updateTimestamp('bindings-last-updated');
                } catch (error) {
                    console.error('Error fetching bindings:', error);
                    document.getElementById('bindings-table-body').innerHTML =
                        `<tr><td colspan="4" class="empty-state">Error loading bindings: ${error.message}</td></tr>`;
                }
            }

            // Function to view messages in a queue
            async function viewQueueMessages(vhost, queueName) {
                try {
                    const encodedVhost = encodeURIComponent(vhost);
                    const encodedName = encodeURIComponent(queueName);
                    const response = await fetch(`${window.location.pathname}/api/queues/${encodedVhost}/${encodedName}/get`);
                    const messages = await response.json();

                    const modal = document.getElementById('message-modal');
                    const queueNameTitle = document.getElementById('queue-name-title');
                    const messagesContainer = document.getElementById('messages-container');

                    queueNameTitle.textContent = queueName;
                    messagesContainer.innerHTML = '';

                    if (!messages || messages.length === 0) {
                        messagesContainer.innerHTML = '<div class="empty-state">No messages in queue</div>';
                    } else {
                        messages.forEach((message, index) => {
                            const messageDiv = document.createElement('div');
                            messageDiv.classList.add('message-container');

                            const messageHeader = document.createElement('div');
                            messageHeader.classList.add('message-header');
                            messageHeader.textContent = `Message #${index + 1}`;

                            const messageBody = document.createElement('div');
                            messageBody.classList.add('message-body');

                            const messageContent = document.createElement('pre');
                            messageContent.classList.add('message-viewer');

                            try {
                                // Try to parse JSON
                                const payload = message.payload;
                                const parsedPayload = typeof payload === 'string' ? JSON.parse(payload) : payload;
                                messageContent.textContent = JSON.stringify(parsedPayload, null, 2);
                            } catch (e) {
                                // If not JSON, display as is
                                messageContent.textContent = message.payload;
                            }

                            messageBody.appendChild(messageContent);
                            messageDiv.appendChild(messageHeader);
                            messageDiv.appendChild(messageBody);

                            messagesContainer.appendChild(messageDiv);
                        });
                    }

                    modal.style.display = 'block';
                } catch (error) {
                    console.error('Error fetching queue messages:', error);
                    alert(`Error fetching messages: ${error.message}`);
                }
            }

            // Setup modal close button
            const modal = document.getElementById('message-modal');
            const closeBtn = document.getElementsByClassName('close')[0];

            closeBtn.onclick = function () {
                modal.style.display = 'none';
            }

            window.onclick = function (event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            }

            // Setup refresh buttons
            document.getElementById('refresh-overview').addEventListener('click', () => {
                fetch(`${window.location.pathname}/api/overview`)
                    .then(res => res.json())
                    .then(data => {
                        updateOverview(data);
                        updateTimestamp('overview-last-updated');
                    })
                    .catch(error => console.error('Error refreshing overview:', error));
            });

            document.getElementById('refresh-queues').addEventListener('click', () => {
                fetch(`${window.location.pathname}/api/queues`)
                    .then(res => res.json())
                    .then(data => {
                        updateQueues(data);
                        updateTimestamp('queues-last-updated');
                    })
                    .catch(error => console.error('Error refreshing queues:', error));
            });

            document.getElementById('refresh-exchanges').addEventListener('click', () => {
                fetch(`${window.location.pathname}/api/exchanges`)
                    .then(res => res.json())
                    .then(data => {
                        updateExchanges(data);
                        updateTimestamp('exchanges-last-updated');
                    })
                    .catch(error => console.error('Error refreshing exchanges:', error));
            });

            document.getElementById('refresh-bindings').addEventListener('click', updateBindings);

            // Load bindings on tab click
            document.querySelector('[data-tab="bindings"]').addEventListener('click', updateBindings);

            // Helper functions
            function formatUptime(uptimeMs) {
                if (!uptimeMs) return '-';

                const seconds = Math.floor(uptimeMs / 1000);
                const minutes = Math.floor(seconds / 60);
                const hours = Math.floor(minutes / 60);
                const days = Math.floor(hours / 24);

                if (days > 0) {
                    return `${days}d ${hours % 24}h ${minutes % 60}m`;
                } else if (hours > 0) {
                    return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
                } else if (minutes > 0) {
                    return `${minutes}m ${seconds % 60}s`;
                } else {
                    return `${seconds}s`;
                }
            }

            function formatRate(rate) {
                if (rate === undefined || rate === null) return 0;
                return rate.toFixed(2);
            }

            function updateTimestamp(elementId) {
                const now = new Date();
                const timeString = now.toLocaleTimeString();
                document.getElementById(elementId).textContent = `Last updated: ${timeString}`;
            }
        });
    </script>
</body>

</html>