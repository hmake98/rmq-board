# Build stage
FROM node:20-alpine as build

# Set environment variable to skip husky install during build
ENV DOCKER_BUILD=1

WORKDIR /app

# Install dependencies needed for build
RUN apk add --no-cache git python3 make g++

# Copy package.json files for all workspaces
COPY package.json lerna.json ./
COPY packages/frontend/package.json ./packages/frontend/

# Install dependencies with better caching
RUN npm install

# Copy frontend application files
COPY packages/frontend/ ./packages/frontend/

# Set working directory to frontend
WORKDIR /app/packages/frontend

# Build the application
RUN npm run build

# Production stage
FROM nginx:alpine

# Add curl for healthchecks
RUN apk add --no-cache curl

# Copy the build output to replace the default nginx contents
COPY --from=build /app/packages/frontend/build /usr/share/nginx/html

# Copy nginx configuration
COPY packages/frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Create nginx cache directories
RUN mkdir -p /var/cache/nginx/client_temp && \
    mkdir -p /var/cache/nginx/proxy_temp && \
    chown -R nginx:nginx /var/cache/nginx

# Add healthcheck
HEALTHCHECK --interval=30s --timeout=5s --retries=3 \
    CMD curl -f http://localhost/health.html || exit 1

# Forward nginx logs to docker log collector
RUN ln -sf /dev/stdout /var/log/nginx/access.log && \
    ln -sf /dev/stderr /var/log/nginx/error.log

# Create a simple health check file
RUN echo "OK" > /usr/share/nginx/html/health.html

# Expose port
EXPOSE 80

# Use non-root user
USER nginx

# Start nginx
CMD ["nginx", "-g", "daemon off;"]